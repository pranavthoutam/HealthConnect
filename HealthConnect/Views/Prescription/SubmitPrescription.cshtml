@model PrescriptionViewModel

@{
    ViewData["Title"] = "Online Prescription";
}

<div class="container bg-white p-4 rounded shadow">
    <h2 class="fw-bold mb-4">Online Prescription</h2>

    <form id="prescription-form" method="post">
        @for (int i = 0; i < Model.MedicineList.Count; i++)
        {
            @Html.Partial("_MedicineEntry", Model.MedicineList[i])
        }

        <div class="text mt-4">
            <button type="button" class="btn btn-primary" id="add-medicine">Add More Medicines</button>
        </div>

        <div class="mt-4">
            <button type="submit" class="btn btn-success">Submit Prescription</button>
        </div>
    </form>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script>
    document.getElementById('add-medicine').addEventListener('click', function () {
        // Create a new medicine entry object with empty fields
        const newMedicineEntry = {
            MedicineName: '',
            Timings: [],
            FoodInstructions: 'before',
            AdditionalAdvice: ''
        };

        // Add the new medicine entry to the model
        const medicineEntries = @Html.Raw(Json.Serialize(Model.MedicineList));

        // Push the new entry to the model array
        medicineEntries.push(newMedicineEntry);

        // Re-render the form with the updated model (you could use a partial view for this part)
        // You will need to reload the page or use Ajax to update the form dynamically
        location.reload();  // This is just a quick way to reload the page; you can replace this with Ajax logic
    });
</script>
